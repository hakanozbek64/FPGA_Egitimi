
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_NANO(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	input 		     [3:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

	wire a,b,cin,cout,sum;

	assign a = SW[0];
	assign b = SW[1];
	assign cin = SW[2];
	
	full_adder_beh fa(a,b,cin,sum,cout);	
	
	assign LED[0] = sum;
	assign LED[1] = cout;
	
endmodule

// structured
module full_adder_structured (input  A, B, CI, 
					    output Sum, Cout);
wire S1, C1, C2;

half_add HA1 (A, B, S1, C1);
half_add HA2 (S1, CI, Sum, C2);

or P1 (Cout, C1, C2);	 

endmodule 

//structured
module half_add (	input A, B, 
						output S, C);
	xor  u1 (S, A, B) ;
	and u2 (C, A, B) ;
endmodule

// dataflow
module full_adder_dataflow (input A, B, Cin, 
						output Sum, Cout);

	assign Sum = A ^  B ^ Cin; 	     			 //continuous assignment
	assign Cout = A & B | (A ^ B )& Cin;          //continuous assignment
	  
endmodule 

//behavioral
module full_adder_beh (input A, B, Cin, output reg Sum, Cout) ;

always@(*)
begin
	{Cout,Sum}  = A + B + Cin; 
end
	  
endmodule 


